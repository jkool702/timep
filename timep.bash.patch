@@ -1287,12 +1287,34 @@
     # load current log (sorted by NEXEC) into array
     mapfile -t logA < <(sort -V -k11,11 <"${logCur}")
 
     log_dupe_flag=false
     kk1=0
     (( ${#logA[@]} > 0 )) && for (( kk=1; kk<${#logA[@]}; kk++ )); do
         [[ "${logA[$kk1]}" == "${logA[$kk]}" ]] && {
             unset "logA[$kk1]"
             log_dupe_flag=true
         }
         kk1=${kk}
     done
     ${log_dupe_flag} && mapfile -t -d '' logA < <(printf '%s\0' "${logA[@]}" | sed -E s/'\0+'/'\0'/g)
 
     [[ -f "${logCur}.out" ]] && \rm -f "${logCur}.out"
     [[ -f "${logCur}.out.combined" ]] && \rm -f "${logCur}.out.combined"
 
-   # loop through lines in reverse order
-    for (( kk=${#logA[@]}-1; kk>=0; kk-- )); do
+   # loop through lines in reverse order
+    for (( kk=${#logA[@]}-1; kk>=0; kk-- )); do
+        # Defensive default initialization for timing arrays to avoid arithmetic errors
+        [[ -z "${endCTimeA[$kk]}" ]] && endCTimeA[$kk]=0
+        [[ -z "${startCTimeA[$kk]}" ]] && startCTimeA[$kk]=0
+        [[ -z "${endWTimeA[$kk]}" ]] && endWTimeA[$kk]=0
+        [[ -z "${startWTimeA[$kk]}" ]] && startWTimeA[$kk]=0
+        # Defensive: make sure cTimeA and wTimeA are always initialized as numeric
+        [[ -z "${cTimeA[$kk]}" ]] && cTimeA[$kk]=1
+        [[ -z "${wTimeA[$kk]}" ]] && wTimeA[$kk]=1
+    done
+
+    # Start main loop
+    for (( kk=${#logA[@]}-1; kk>=0; kk-- )); do
+
         # read log fields into variables
         IFS=$'\t' read -r nPipe startWTime startCTime endWTime endCTime func pid nexec lineno _ cmd <<<"${logA[$kk]}"
         nPipeA[$kk]="${nPipe}"
         startWTimeA[$kk]="${startWTime}"
         endWTimeA[$kk]="${endWTime}"
         startCTimeA[$kk]="${startCTime}"
         endCTimeA[$kk]="${endCTime}"
         funcA[$kk]="${func}"
         pidA[$kk]="${pid}"
         nexecA[$kk]="${nexec}"
         linenoA[$kk]="${lineno}"
         cmd="${cmd//\(\&\)/\\\(\\\&\\\)}"
         cmd="${cmd//\(\^\)/\\\(\\\^\\\)}"
         read -r -d '' cmd < <(echo "${cmd}"; printf '\0')
         cmd="${cmd//$'\n'/\$"'"\\n"'"}"
         cmd="${cmd//$'\t'/\$"'"\\t"'"}"
         cmdA[$kk]="${cmd}"
@@ -1329,13 +1351,40 @@
         fi
         ${inPipeFlag} && normalCmdFlagA[$kk]=false
 
         # compute runtime from start/end timestamps (unless we are either in the middle of a pipeline OR it is a subshell / bg fork)
-        [[ -z ${wTimeA[$kk]//[^0-9]/} ]] && [[ ${endWTimeA[$kk]//[^0-9]/} ]] && [[ ${startWTimeA[$kk]//[^0-9]/} ]] && (( wTimeA[$kk] = 10#0${endWTimeA[$kk]//[^0-9]/} - 10#0${startWTimeA[$kk]//[^0-9]/}[...]
-
-        [[ -z ${cTimeA[$kk]//[^0-9]/} ]] && [[ ${endCTimeA[$kk]//[^0-9]/} ]] && {
-            if [[ ${startCTimeA[$kk]//[^0-9]/} ]] && (( 10#0${endCTimeA[$kk]//[^0-9]/} > 10#0${startCTimeA[$kk]//[^0-9]/} + ( timep_CTIME_CORRECTION << 1 ) )); then
-                (( cTimeA[$kk] = 10#0${endCTimeA[$kk]//[^0-9]/} - 10#0${startCTimeA[$kk]//[^0-9]/} - timep_CTIME_CORRECTION ))
-            elif [[ ${startCTimeA[$kk]//[^0-9]/} ]] && (( 10#0${endCTimeA[$kk]//[^0-9]/} >= 10#0${startCTimeA[$kk]//[^0-9]/} )); then 
-                 (( cTimeA[$kk] = 1 + ( 10#0${endCTimeA[$kk]//[^0-9]/} - 10#0${startCTimeA[$kk]//[^0-9]/} ) >> 1 ))
-           elif ${timep_CLOCK_GETTIME_FLAG}; then
-                (( cTimeA[$kk] = 10#0${endCTimeA[$kk]//[^0-9]/} - timep_CTIME_CORRECTION ))
-            fi
-        }
-
-        [[ ${wTimeA[$kk]} ]] || (( wTimeA[$kk] >= 1 )) || {
-
-            wTimeA[$kk]=1
-        }
-        [[ ${cTimeA[$kk]} ]] || (( cTimeA[$kk] >= 1 )) || {
-
-            cTimeA[$kk]=1
-        }
+        # Defensive: ensure all are numeric, fallback to 1
+        num_wt="${wTimeA[$kk]}"
+        num_ct="${cTimeA[$kk]}"
+        num_endwt="${endWTimeA[$kk]}"
+        num_startwt="${startWTimeA[$kk]}"
+        num_endct="${endCTimeA[$kk]}"
+        num_startct="${startCTimeA[$kk]}"
+        # Wall time
+        if [[ -z ${num_wt//[^0-9]/} ]] && [[ ${num_endwt//[^0-9]/} ]] && [[ ${num_startwt//[^0-9]/} ]]; then
+            (( wTimeA[$kk] = 10#0${num_endwt//[^0-9]/} - 10#0${num_startwt//[^0-9]/} - timep_WTIME_CORRECTION ))
+        fi
+        # CPU time
+        if [[ -z ${num_ct//[^0-9]/} ]] && [[ ${num_endct//[^0-9]/} ]]; then
+            if [[ ${num_startct//[^0-9]/} ]] && (( 10#0${num_endct//[^0-9]/} > 10#0${num_startct//[^0-9]/} + ( timep_CTIME_CORRECTION << 1 ) )); then
+                (( cTimeA[$kk] = 10#0${num_endct//[^0-9]/} - 10#0${num_startct//[^0-9]/} - timep_CTIME_CORRECTION ))
+            elif [[ ${num_startct//[^0-9]/} ]] && (( 10#0${num_endct//[^0-9]/} >= 10#0${num_startct//[^0-9]/} )); then
+                (( cTimeA[$kk] = 1 + ( 10#0${num_endct//[^0-9]/} - 10#0${num_startct//[^0-9]/} ) >> 1 ))
+            elif ${timep_CLOCK_GETTIME_FLAG}; then
+                (( cTimeA[$kk] = 10#0${num_endct//[^0-9]/} - timep_CTIME_CORRECTION ))
+            fi
+        fi
+        # Defensive: fallback to 1 if values are missing or not positive
+        if [[ -z "${wTimeA[$kk]}" ]] || (( wTimeA[$kk] < 1 )); then
+            wTimeA[$kk]=1
+        fi
+        if [[ -z "${cTimeA[$kk]}" ]] || (( cTimeA[$kk] < 1 )); then
+            cTimeA[$kk]=1
+        fi
@@ -1407,12 +1456,23 @@
     for kk in "${!linenoUniqWTimeA[@]}"; do
 
-        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]//[^0-9 ]/}"
-        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]//[^0-9 ]/}"
-
-        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]##*( )}"
-        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]##*( )}"
-        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]%%*( )}"
-        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]%%*( )}"
-
-        [[ ${linenoUniqWTimeA[$kk]} ]] && (( linenoUniqWTimeA[$kk] = ${linenoUniqWTimeA[$kk]// /\+} )) #|| linenoUniqWTimeA[$kk]=0
-        [[ ${linenoUniqCTimeA[$kk]} ]] && (( linenoUniqCTimeA[$kk] = ${linenoUniqCTimeA[$kk]// /\+} )) #|| linenoUniqCTimeA[$kk]=0
+        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]//[^0-9 ]/}"
+        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]//[^0-9 ]/}"
+
+        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]##*( )}"
+        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]##*( )}"
+        linenoUniqWTimeA[$kk]="${linenoUniqWTimeA[$kk]%%*( )}"
+        linenoUniqCTimeA[$kk]="${linenoUniqCTimeA[$kk]%%*( )}"
+
+        # Defensive: If the string is empty, set to 1 (avoid division by zero and arithmetic errors)
+        if [[ -z "${linenoUniqWTimeA[$kk]}" ]]; then
+            linenoUniqWTimeA[$kk]=1
+        fi
+        if [[ -z "${linenoUniqCTimeA[$kk]}" ]]; then
+            linenoUniqCTimeA[$kk]=1
+        fi
+
+        [[ ${linenoUniqWTimeA[$kk]} ]] && (( linenoUniqWTimeA[$kk] = ${linenoUniqWTimeA[$kk]// /\+} ))
+        [[ ${linenoUniqCTimeA[$kk]} ]] && (( linenoUniqCTimeA[$kk] = ${linenoUniqCTimeA[$kk]// /\+} ))
@@ -1420,10 +1480,19 @@
         (( wTimeP = ( 10000 * linenoUniqWTimeA[$kk] ) / wTimeTotal ))
         printf -v wTimeP '%0.4d' "$wTimeP"
         case "${wTimeP}" in
             10000) linenoUniqWTimePA[$kk]=100.00 ;;
             0|'') linenoUniqWTimePA[$kk]=00.00 ;;
             *) linenoUniqWTimePA[$kk]="${wTimeP:0:2}.${wTimeP:2}" ;;
         esac
 
-        (( cTimeP = ( 10000 * linenoUniqCTimeA[$kk] ) / cTimeTotal ))
-        printf -v cTimeP '%0.4d' "$cTimeP"
-        case "${cTimeP}" in
-            10000) linenoUniqCTimePA[$kk]=100.00 ;;
-            0|'') linenoUniqCTimePA[$kk]=00.00 ;;
-            *) linenoUniqCTimePA[$kk]="${cTimeP:0:2}.${cTimeP:2}" ;;
-        esac
+        # Defensive: avoid division by zero
+        if (( cTimeTotal < 1 )); then
+            cTimeTotal=1
+        fi
+        (( cTimeP = ( 10000 * linenoUniqCTimeA[$kk] ) / cTimeTotal ))
+        printf -v cTimeP '%0.4d' "$cTimeP"
+        case "${cTimeP}" in
+            10000) linenoUniqCTimePA[$kk]=100.00 ;;
+            0|'') linenoUniqCTimePA[$kk]=00.00 ;;
+            *) linenoUniqCTimePA[$kk]="${cTimeP:0:2}.${cTimeP:2}" ;;
+        esac
